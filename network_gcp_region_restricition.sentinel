#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"

prefix = "us-"
bq_multi_region = "US"

# Get all Pubsub Topics
allTopics = plan.find_resources("google_pubsub_topic")

# Get all BigQuery Resources
all_BQ_Resources = plan.find_resources("google_bigquery_dataset")

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#-------------------------------PubSub Code------------------------------------------#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#

# print(allTopics)

violations = {}
for allTopics as address, rc {
	message_storage_policy = plan.evaluate_attribute(rc.change.after, "message_storage_policy")
	print(message_storage_policy)
	is_undefined = rule { types.type_of(message_storage_policy) is "null" }
	#print(is_undefined)

	if is_undefined is true {
		#print("hidddd")
		violations[address] = rc

	} else {

		allowed_persistence_regions = plan.evaluate_attribute(rc.change.after.message_storage_policy[0], "allowed_persistence_regions")
		#print (allowed_persistence_regions)

		for allowed_persistence_regions as region {
			if not strings.has_prefix(region, prefix) {
				violations[address] = rc
			}
		}
	}

}

# print(violations)

GCP_PUBSUB_REGION = rule { length(violations) is 0 }

#------------------Closing Code of Pubsub-----------------------#

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#-------------------------------BigQuery Code------------------------------------------#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#

location_messages = {}
for all_BQ_Resources as address, rc {
	bigquery_location = plan.evaluate_attribute(rc.change.after, "location")

	print(bigquery_location)

	if types.type_of(bigquery_location) is null {

		location_messages[address] = " region with value " + bq_location + " which is not allowed"
		print(location_messages)

	} else {

		if bigquery_location == bq_multi_region or strings.has_prefix(bigquery_location, prefix) {

		} else {

			location_messages[address] = "Resource " + address + " has default region"
			print(location_messages)

		}
	}
}

GCP_BIGQUERY_REGION = rule { length(location_messages) is 0 }

#------------------Closing Code of BigQuery-----------------------#

# Main rule
main = rule { GCP_PUBSUB_REGION and GCP_BIGQUERY_REGION }
