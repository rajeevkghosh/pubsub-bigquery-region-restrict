import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"google": {
				"alias": {
					"": {
						"config": {},
						"references": {
							"access_token": [
								"var.access_token",
							],
						},
						"version": "",
					},
				},
				"config": {},
				"references": {
					"access_token": [
						"var.access_token",
					],
				},
				"version": "",
			},
		},
		"resources": {
			"google_bigquery_dataset": {
				"dataset": {
					"config": {
						"dataset_id":                  "example_dataset",
						"default_table_expiration_ms": 3600000,
						"description":                 "This is a test description",
						"friendly_name":               "test",
						"labels": {
							"env": "default",
						},
					},
					"provisioners": null,
					"references": {
						"dataset_id":                  [],
						"default_table_expiration_ms": [],
						"description":                 [],
						"friendly_name":               [],
						"labels":                      [],
					},
				},
			},
			"google_pubsub_topic": {
				"example": {
					"config": {
						"message_storage_policy": [
							{
								"allowed_persistence_regions": [
									"us-central1",
									"us-east-1",
									"us-west-1",
								],
							},
						],
						"name": "example-topic",
					},
					"provisioners": null,
					"references": {
						"message_storage_policy": [
							{
								"allowed_persistence_regions": [],
							},
						],
						"name": [],
					},
				},
			},
		},
		"variables": {
			"access_token": {
				"default":     null,
				"description": "access token",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
